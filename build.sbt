// scalastyle:off

name := "arq2"
organization := "com.github.leonhardtdavid"
version := "1.0-SNAPSHOT"
scalaVersion := "2.12.10"

lazy val root = (project in file(".")).enablePlugins(PlayScala, BuildInfoPlugin)

buildInfoKeys := Seq[BuildInfoKey](name, version, BuildInfoKey.action("build_time") {
  java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(java.time.LocalDateTime.now())
})
buildInfoPackage := "controllers"
buildInfoObject := "BuildInfo"
buildInfoOptions += BuildInfoOption.ToJson

libraryDependencies ++= {
  val playSlickVersion = "4.0.2"
  val circeVersion     = "0.11.1"

  Seq(
    guice,
    ehcache,
    ws,
    // Json
    "io.circe"     %% "circe-core"           % circeVersion,
    "io.circe"     %% "circe-generic"        % circeVersion,
    "io.circe"     %% "circe-parser"         % circeVersion,
    "io.circe"     %% "circe-generic-extras" % circeVersion,
    "io.circe"     %% "circe-java8"          % circeVersion,
    "com.dripower" %% "play-circe"           % "2711.0",
    "io.taig"      %% "circe-validation"     % "0.1.1",
    // Database
    "org.postgresql"    % "postgresql"             % "42.2.6",
    "com.typesafe.play" %% "play-slick"            % playSlickVersion,
    "com.typesafe.play" %% "play-slick-evolutions" % playSlickVersion,
    // Testing
    "org.mockito"            % "mockito-core"        % "2.28.2"  % Test,
    "org.scalatestplus.play" %% "scalatestplus-play" % "4.0.3"   % Test,
    "com.h2database"         % "h2"                  % "1.4.198" % Test
  )
}

parallelExecution in Test := false

javacOptions ++= Seq("-source", "1.8")
scalacOptions ++= Seq(
  "-deprecation",
  "-encoding",
  "UTF-8",
  "-feature",
  "-language:higherKinds",
  "-language:postfixOps",
  "-unchecked",
  "-Xlint",
  "-Yno-adapted-args",
  "-Ywarn-dead-code",
  "-Ywarn-numeric-widen",
  "-Ywarn-value-discard",
  "-Xfuture",
  "-Ywarn-unused-import",
  "-Ypartial-unification"
)

// Warning suppression on autogenerated files
libraryDependencies ++= {
  val silencerVersion = "1.3.1"
  Seq(
    compilerPlugin("com.github.ghik" %% "silencer-plugin" % silencerVersion),
    "com.github.ghik" %% "silencer-lib" % silencerVersion % Provided
  )
}
// silence all warnings on autogenerated files
scalacOptions += "-P:silencer:pathFilters=target/.*"
// Make sure you only exclude warnings for the project directories, i.e. make builds reproducible
scalacOptions += s"-P:silencer:sourceRoots=${baseDirectory.value.getCanonicalPath}"

// Run checkstyel before compile
lazy val compileScalastyle = taskKey[Unit]("compileScalastyle")
compileScalastyle := scalastyle.in(Compile).toTask("").value
compileScalastyle := { compileScalastyle.triggeredBy(scalafmt in Compile).value }

// Coverage configurations
coverageMinimum := 90
coverageFailOnMinimum := true
coverageExcludedPackages := "<empty>;router;global;binders;"
coverageExcludedFiles := ".*BuildInfo.*;.*HealthCheckController.*;.*PlayDBSpec.*;.*Circe.*;"

// Autoformat code configurations
scalafmtOnCompile := true
scalafmtTestOnCompile := true

mappings in (Compile, packageDoc) := Seq()
sources in (Compile, doc) := Seq.empty
publishArtifact in (Compile, packageDoc) := false
